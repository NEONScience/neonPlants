% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stackPlantPresence.R
\name{stackPlantPresence}
\alias{stackPlantPresence}
\title{Stack NEON plant occurrence data}
\usage{
stackPlantPresence(divDataList = NA, totalSampledAreaFilter = NA_integer_)
}
\arguments{
\item{divDataList}{A list of data.frames from the NEON Plant presence and percent cover (DP1.10058.001) data product as returned from neonUtilities::loadByProduct(). This list must include data.frames with the names 'div_1m2Data' and 'div_10m2Data100m2Data'.}

\item{totalSampledAreaFilter}{(integer, options are NA, 1, 10, 100, 400) The plot size for which data are returned. Default (NA) will return data for all plot sizes in the dataset. If you select a plot size, the function will filter the data returned to the desired plot size.}
}
\value{
This function returns a data frame
}
\description{
Use this function to aggregate the occurrence data from the NEON Plant presence and percent cover (DP1.10058.001) data product to list the plant species present at each plot scale.
}
\details{
This function properly stacks occurrence records from the NEON Plant presence and percent cover, (DP1.10058.001) data product. Provide a list that includes data.frames named 'div_1m2Data' and 'div_10m2Data100m2Data' and this function will properly stack the occurrence data for each plot scale. If you only want to return a species list for one plot scale, use the totalSampledAreaFilter parameter to select the scale (1, 10, 100, or 400m). If totalSampledAreaFilter is NA (default), then the function will return a data.frame with the occurrence records for all plot scales, and you will need to filter the output to get species lists for each plot scale.
}
\examples{
\dontrun{

# load additional packages for these examples
library(neonUtilities)
library(dplyr)

# get data
allDiv <- loadByProduct(
  dpID = "DP1.10058.001",
  site = "SRER",
  startdate = "2010-01",
  package = "basic",
  check.size = FALSE)


# stack the data by sending the list returned by neonUtilities::loadByProduct
data_stacked <- stackPlantPresence(
  divDataList = allDiv)


# send list of data using pipe
data_stacked <- allDiv \%>\%
  stackPlantPresence()


# filter to 10m plots
data_stacked_10 <- allDiv \%>\%
  stackPlantPresence(totalSampledAreaFilter = 10)


# filter to 10m plots outside of the stackPlantPresence function
data_stacked_10 <- allDiv \%>\%
  stackPlantPresence() \%>\%
  filter(totalSampledArea == 10)


# make your own list and stack the data
my_1m_data <- allDiv$div_1m2Data
my_10_100m_data <- allDiv$div_10m2Data100m2Data

data_stacked <- stackPlantPresence(
  divDataList = list(
    div_1m2Data = my_1m_data,
    div_10m2Data100m2Data = my_10_100m_data))


# filter tables to a single plot, then stack the data
my_1m_data_SRER_43 <- my_1m_data \%>\%
  filter(namedLocation == "SRER_043.basePlot.div")

my_10_100m_data_SRER_43 <- my_10_100m_data \%>\%
  filter(namedLocation == "SRER_043.basePlot.div")

data_stacked_SRER_43 <- stackPlantPresence(
  divDataList = list(
    div_1m2Data = my_1m_data_SRER_43,
    div_10m2Data100m2Data = my_10_100m_data_SRER_43))
}
}
\references{
License: GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007
}
\author{
Dave T Barnett \email{dbarnettl@battelleecology.org} \cr
Eric Sokol \email{esokol@battelleecology.org} \cr
}
